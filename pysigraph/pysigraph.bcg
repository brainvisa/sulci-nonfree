
class PySigraphComponent( GenericMakerComponent ):
  _name = 'pysigraph'

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      if self._found and int(self._data['enabled']):
        source = os.path.join( self.sourceDir(), 'src', 'sip' )
        build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
        self._data[ 'sipinclude' ] = [ '-I', build, '-I', source ]
        self._data[ 'sipinclude' ] = SipComponent.sipinclude( self )

  def dependencies( self ):
    return [ SigraphlibComponent, 'pyaims(aims)', 'datamind' ]

  def weakDependencies( self ):
    result = []
    if weakDependency( 'sisvm', getInstance( SigraphlibComponent ) ):
      result.append( 'sisvm' )
    return result

  def build( self, instances ):
    if not self._found or self._data[ 'enabled' ] == '0':
      return
    # genrate SIP files from templates
    source = os.path.join( self.sourceDir(), 'src', 'sip' )
    build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
    cwd = os.getcwd()
    os.chdir( source )
    pyaims = getInstance( PyAimsComponent )
    pad = os.path.join( pyaims.sourceDir(), 'src', 'sip' )
    cmd = sys.executable + ' "' \
      + os.path.join( pad, 'maketemplates.py' ) + '" -c -o "' \
      + build + '"'
    print cmd
    os.system( cmd )
    os.chdir( cwd )
    # regular build
    GenericMakerComponent.build( self, instances )

  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'sigraph'
