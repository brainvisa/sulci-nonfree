#-----------------------------------------------------------------------------
class SigraphlibComponent( GenericMakerComponent ):
  _name = 'sigraphlib'

  optionsDescription = GenericMakerComponent.optionsDescription.copy()
  optionsDescription.update( {
    'sisvm': ( None, 'include SVM plugin (default: autodetect)' ),
  } )

  def __init__( self, options ):
    GenericMakerComponent.__init__( self, options )
    # Default options values
    self.setDefaultOption( 'sisvm', 1 )

  def dependencies( self ):
    deps = [ 'neuron', 'aimsalgo(aims)' ]
    return deps

  def weakDependencies( self ):
    result = []
    if self.getOption( 'sisvm' ) \
      and weakDependency( SiSvmComponent, self ):
      result.append( SiSvmComponent )
    return result

  def _libraries( self ):
    return [ 'sigraph' ]

#-----------------------------------------------------------------------------
class SiSvmComponent( GenericMakerModuleComponent ):
	_name = 'sisvm'

	def sourceName(self):
		return 'sigraph'

	def dependencies(self):
		datamind = getInstance('datamind')
		return [SigraphlibComponent, DatamindLibsvmComponent]

	def _libraries( self ):
		return ['sigraphsvm']

