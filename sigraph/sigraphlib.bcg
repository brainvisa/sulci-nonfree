#-----------------------------------------------------------------------------
class SigraphlibComponent( GenericMakerComponent ):
  _name = 'sigraphlib'

  optionsDescription = GenericMakerComponent.optionsDescription.copy()
  optionsDescription.update( {
    'sisvm': ( None, 'include SVM plugin (default: autodetect)' ),
  } )

  def __init__( self, options ):
    GenericMakerComponent.__init__( self, options )
    # Default options values
    self.setDefaultOption( 'sisvm', 1 )

  def sourceName( self ):
    return 'sigraph'

  def dependencies( self ):
    deps = [ 'neuron', 'aimsalgo(aims)' ]
    return deps

  def weakDependencies( self ):
    result = []
    if self.getOption( 'sisvm' ) \
      and weakDependency( SiSvmComponent, self ):
      result.append( SiSvmComponent )
    return result

  def _libraries( self ):
    return [ 'sigraph' ]

  def shareDir( self ):
    return os.path.join( 'share', 'sigraph-' + self.version() )

  def docDir( self ):
    return os.path.join( 'share', 'doc', 'sulci-' + self.version() )

#-----------------------------------------------------------------------------
class SiSvmComponent( GenericMakerModuleComponent ):
  _name = 'sisvm'

  def sourceName(self):
    return 'sigraph-private'

  def dependencies(self):
    return [SigraphlibComponent, 'datamind_libsvm(datamind)']

  def _libraries( self ):
    return ['sigraphsvm']

